<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".autogenerated.cs" #>
//====================================================================================================
// <auto-generated>       THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY       </auto-generated>
//====================================================================================================

using Enderlook.Threading;

using System;

using Unity.Jobs;

namespace Enderlook.Unity.Threading.Jobs
{
    public static partial class JobManager
    {
<#
    foreach (bool useAction in new bool[] { true, false })
    {
        string jobTaskType = useAction ? "JobTask" : "JobTask<TAction>";
        string actionType = useAction ? "Action" : "TAction";
#>
        private class JobTasksManager<#= useAction ? "" : "<TAction> where TAction : IAction"#>
        {
            private const int GROW_FACTOR = 2;
            private const int DEFAULT_CAPACITY = 4;
            private <#= jobTaskType #>[] jobTasks = new <#= jobTaskType #>[DEFAULT_CAPACITY];
            private int size;

            public void Add(JobHandle jobHandle, <#= actionType #> onJobComplete, bool canCompleteImmediately = true)
            {
                <#= jobTaskType #> jobTask = default;
                jobTask.JobHandle = jobHandle;
                jobTask.OnJobComplete = onJobComplete;

                if (jobTask.IsCompleted)
                {
                    if (canCompleteImmediately)
                    {
                        jobTask.Complete();
                        return;
                    }
                }

                if (jobTasks.Length == size)
                {
                    <#= jobTaskType #>[] newJobTasks = new <#= jobTaskType #>[jobTasks.Length * GROW_FACTOR];
                    Array.Copy(jobTasks, newJobTasks, jobTasks.Length);
                }

                int index = size++;
                jobTasks[index] = jobTask;
            }

            public void Update()
            {
                int j = 0;
                for (int i = 0; i < size; i++)
                {
                    <#= jobTaskType #> jobTask = jobTasks[i];
                    if (jobTask.IsCompleted)
                        jobTask.Complete();
                    else
                        jobTasks[j++] = jobTask;
                }
                size = j;
            }
        }
<#
    }
#>
    }
}
